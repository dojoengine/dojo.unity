name: Legacy Release Build

# This workflow is triggered when a release is published (not draft)
# It builds and uploads the Unity package to the existing release
on:
  release:
    types: [published]

jobs:
  build-and-upload:
    name: Build and Upload Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          lfs: true
          fetch-depth: 0

      - name: Get release info
        id: release_info
        run: |
          echo "tag_name=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          echo "release_name=${{ github.event.release.name }}" >> $GITHUB_OUTPUT
          echo "Release: ${{ github.event.release.name }}"
          echo "Tag: ${{ github.event.release.tag_name }}"

      # Git LFS setup
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      # Unity Cache
      - name: Cache Unity Library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-Build-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-Build-

      # Build Unity Package
      - name: Build Unity Package
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: StandaloneLinux64
          buildMethod: Editor.Builder.BuildPackage

      # Upload package to the published release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./Build/dojo.unitypackage
          asset_name: dojo-${{ steps.release_info.outputs.tag_name }}.unitypackage
          asset_content_type: application/octet-stream

      - name: Build Summary
        run: |
          echo "âœ… **Unity Package Built Successfully!**"
          echo ""
          echo "**Release:** ${{ steps.release_info.outputs.release_name }}"
          echo "**Tag:** ${{ steps.release_info.outputs.tag_name }}"
          echo "**Package:** dojo-${{ steps.release_info.outputs.tag_name }}.unitypackage"
          echo ""
          echo "The package has been uploaded to the release."