name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Commented out until tests are ready
  # test:
  #   name: Run Tests
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         lfs: true

  #     - name: Setup Git LFS
  #       run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

  #     - name: Cache Git LFS
  #       uses: actions/cache@v4
  #       with:
  #         path: .git/lfs
  #         key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

  #     - name: Git LFS Pull
  #       run: |
  #         git lfs pull
  #         git add .
  #         git reset --hard

  #     - name: Cache Unity Library
  #       uses: actions/cache@v4
  #       with:
  #         path: Library
  #         key: Library-${{ runner.os }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
  #         restore-keys: |
  #           Library-${{ runner.os }}-

  #     - name: Run Unity Tests
  #       uses: game-ci/unity-test-runner@v4
  #       env:
  #         UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  #         UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  #         UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
  #       with:
  #         projectPath: .
  #         testMode: all
  #         artifactsPath: TestResults
  #         githubToken: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Upload Test Results
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: test-results
  #         path: TestResults

  format:
    name: Check Code Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Install dotnet-format
        run: dotnet tool install -g dotnet-format

      # Create a temporary solution and add all .cs files
      - name: Create temporary solution
        run: |
          # Create a temporary directory for the solution
          mkdir -p _temp
          cd _temp
          
          # Create a new solution
          dotnet new sln -n TempSolution
          
          # Create a temporary project and add all .cs files
          dotnet new classlib -n TempProject
          rm ./TempProject/Class1.cs
          
          # Copy all .cs files from Assets to the temp project (adjust paths as needed)
          find ../Assets -name "*.cs" -exec cp {} ./TempProject/ \;
          
          # Add project to solution
          dotnet sln add ./TempProject/TempProject.csproj
          
          cd ..

      # Run dotnet format on the temporary solution
      - name: Check C# Formatting
        run: dotnet format ./_temp/TempSolution.sln --verify-no-changes --verbosity detailed --severity error
        
      # Cleanup
      - name: Cleanup temporary files
        run: rm -rf _temp

  build:
    name: Build Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup Git LFS
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Cache Git LFS
        uses: actions/cache@v4
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Cache Unity Library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ runner.os }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-${{ runner.os }}-

      - name: Build Unity Package
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: StandaloneLinux64
          buildMethod: Editor.Builder.BuildPackage