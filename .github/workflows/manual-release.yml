name: Manual Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.4.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      draft:
        description: 'Create as draft'
        required: false
        default: true
        type: boolean

jobs:
  manual-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Validate tag format
        run: |
          TAG="${{ github.event.inputs.tag }}"
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid tag format. Expected format: v1.2.3"
            exit 1
          fi
          echo "✅ Tag format is valid: $TAG"

      - name: Check if tag exists
        run: |
          TAG="${{ github.event.inputs.tag }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "✅ Tag $TAG exists"
          else
            echo "❌ Tag $TAG does not exist. Please create the tag first or use the prepare-release workflow."
            exit 1
          fi

      - name: Generate changelog
        id: changelog
        run: |
          TAG="${{ github.event.inputs.tag }}"
          
          echo "# Release $TAG" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 $TAG~1 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## Changes since $PREVIOUS_TAG" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            git log --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" $PREVIOUS_TAG..$TAG >> CHANGELOG.md
          else
            echo "## Initial Release" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "This is the initial release of the Dojo Unity SDK." >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "---" >> CHANGELOG.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$TAG" >> CHANGELOG.md
          
          {
            echo 'changelog<<EOF'
            cat CHANGELOG.md
            echo EOF
          } >> $GITHUB_OUTPUT

      # Git LFS setup
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      # Unity Cache
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-Build-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-Build-

      # Build Unity Package
      - name: Build Unity Package
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: StandaloneLinux64
          buildMethod: Editor.Builder.BuildPackage

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag }}
          release_name: Release ${{ github.event.inputs.tag }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: ${{ github.event.inputs.draft }}
          prerelease: ${{ github.event.inputs.prerelease }}

      - name: Upload Unity Package to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Build/dojo.unitypackage
          asset_name: dojo-${{ github.event.inputs.tag }}.unitypackage
          asset_content_type: application/octet-stream

      - name: Release Summary
        run: |
          echo "🎉 **Manual Release Created!**"
          echo ""
          echo "**Tag:** ${{ github.event.inputs.tag }}"
          echo "**Draft:** ${{ github.event.inputs.draft }}"
          echo "**Pre-release:** ${{ github.event.inputs.prerelease }}"
          echo "**Release URL:** https://github.com/${{ github.repository }}/releases/tag/${{ github.event.inputs.tag }}"
          echo ""
          echo "The Unity package has been built and attached to the release."
