
// <auto-generated>
//  This code was generated by the following tool on 2023-11-12 20:17:56 GMT-06:00:
//      https://github.com/bottlenoselabs/c2cs (v6.1.3.0)
//
//  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ReSharper disable All

#region Template
#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS8981
using bottlenoselabs.C2CS.Runtime;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
#endregion

namespace dojo_namespace
{

    public static unsafe partial class dojo
    {
        private const string LibraryName = "dojo";

        #region API

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "client_add_entities_to_sync")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void client_add_entities_to_sync(ToriiClient* client, EntityModel* entities, UIntPtr entities_len, Error* error);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "client_free")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void client_free(ToriiClient* client);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "client_new")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial ToriiClient* client_new(CString torii_url, CString rpc_url, FieldElement* world, EntityModel* entities, UIntPtr entities_len, Error* error);

        [CNode(Kind = "Function")]
        [LibraryImport(LibraryName, EntryPoint = "client_remove_entities_to_sync")]
        [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
        public static partial void client_remove_entities_to_sync(ToriiClient* client, EntityModel* entities, UIntPtr entities_len, Error* error);

        #endregion

        #region Types

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
        public struct EntityModel
        {
            [FieldOffset(0)] // size = 8
            public CString _model;

            public string model
            {
                get
                {
                    return CString.ToString(_model);
                }
                set
                {
                    _model = CString.FromString(value);
                }
            }

            [FieldOffset(8)] // size = 8
            public FieldElement* keys;

            [FieldOffset(16)] // size = 8
            public UIntPtr keys_len;
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
        public struct Error
        {
            [FieldOffset(0)] // size = 8
            public CString _message;

            public string message
            {
                get
                {
                    return CString.ToString(_message);
                }
                set
                {
                    _message = CString.FromString(value);
                }
            }
        }

        [CNode(Kind = "Struct")]
        [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 1)]
        public struct FieldElement
        {
            [FieldOffset(0)] // size = 32
            public fixed byte _data[32]; // uint8_t[32]

            public readonly Span<byte> data
            {
                get
                {
                    fixed (FieldElement* @this = &this)
                    {
                        var pointer = &@this->_data[0];
                        var span = new Span<byte>(pointer, 32);
                        return span;
                    }
                }
            }
        }

        [CNode(Kind = "OpaqueType")]
        [StructLayout(LayoutKind.Sequential)]
        public struct ToriiClient
        {
        }

        #endregion
    }

}
